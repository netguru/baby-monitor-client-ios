#
# bitrise.yml
# Copyright Â© 2017 Netguru Sp. z o.o. All rights reserved.
#
# This `bitrise.yml` variant contains the default configuration to be used in
# an iOS app repository. You can strip the comments in your `bitrise.yml`, if
# you want.
#
# Scripts in the following `bitrise.yml` file makes use of the following
# environment variables that should be set up as secret:
#
# - `HOCKEYAPP_APP_ID_STAGING`, `HOCKEYAPP_APP_ID_PRODUCTION`: App IDs of
#   staging and production HockeyApp apps.
#
# - `HOCKEYAPP_API_TOKEN_STAGING`, `HOCKEYAPP_API_TOKEN_PRODUCTION`: API tokens
#   used to upload and release builds to HockeyApp app.
#
# - `SLACK_WEBHOOK_URL`: A generic webhook integration URL used to post
#   notifications to Slack.
#
# - `SLACK_CHANNEL` (optional): A target Slack channel to post notifications to.
#   If not present, the default channel of the integration is used.
#
# - `JIRA_DOMAIN` (optional): A domain URL to the JIRA installation, typically a
#   subdomain on `atlassian.net`. If not present, information about JIRA task
#   will not be included in a Slack notification.
#
# - `JIRA_PROJECT_KEY` (optional): A JIRA project key assocciated with the
#   repository. If not present, information about JIRA task will not be included
#   in a Slack notification.
#
# - `GITHUB_ACCESS_TOKEN` (optional, but recommended): This can be access token from
#   your GitHub account. Setting up Carthage with access token will allow it to
#   download libraries without hitting API rate limit. This way Carthage step will
#   run faster - if library can be downloaded, Carthage will do that, rather than
#   compiling dependency.
#
# Also, those scripts use the following environment variables that are declared
# publicly in the following file:
#
# - `XCODEBUILD_PROJECT`: A path to a project or a workspace Xcode file.
#
# - `XCODEBUILD_SCHEME`: A name of the scheme to be built.
#
# - `XCODEBUILD_OPTIONS`: Additional build settings passed straight to each
#   `xcodebuild` invocation.
#

# CLI metadata.
#
# This metadata is required to always be in `bitrise.yml`. The `format_version`
# setting will be occasionally bumped.

format_version: 1.3.1
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

# Workflow trigger map.
#
# The following trigger map triggers a build only for pull requests against
# `develop` and `master` branches (from forks as well) and pushes to `develop`
# and `master` branches.
#
# More on trigger maps: http://devcenter.bitrise.io/webhooks/trigger-map

trigger_map:

  - push_branch: highway
    workflow: build-staging

  - push_branch: master
    workflow: build-release-candidate

  - pull_request_target_branch: highway
    workflow: build-pull-request

  - pull_request_target_branch: master
    workflow: build-pull-request

# Workflow declarations.
#
# This list contains workflows used in the above trigger map.

workflows:

  # Build, test and deploy a staging app.
  #
  # This workflow pulls dependencies, builds and tests an app with staging
  # scheme and finally pushes the archived build to HockeyApp.

  build-staging:
    envs:
      - XCODEBUILD_SCHEME: Staging
      - HOCKEYAPP_API_TOKEN: $HOCKEYAPP_API_TOKEN_STAGING
      - HOCKEYAPP_APP_ID: $HOCKEYAPP_APP_ID_STAGING
      - HIGHWAY_PRESET: staging
    before_run:
      - cache-pull
      - bundle-install
      - run-highway
    after_run:
      - cache-push
      - deploy-bitriseio

  # Build, test and deploy a release candidate app.
  #
  # This workflow pulls dependencies, builds and tests an app with production
  # scheme and finally pushes the archived build to HockeyApp.

  build-release-candidate:
    envs:
      - XCODEBUILD_SCHEME: Production
      - HOCKEYAPP_API_TOKEN: $HOCKEYAPP_API_TOKEN_PRODUCTION
      - HOCKEYAPP_APP_ID: $HOCKEYAPP_APP_ID_PRODUCTION
      - HIGHWAY_PRESET: release
    before_run:
      - cache-pull
      - bundle-install
      - run-highway
    after_run:
      - cache-push
      - deploy-bitriseio

  # Build and test a staging app.
  #
  # This workflow pulls dependencies and then builds and tests an app with
  # staging scheme.

  build-pull-request:
    envs:
      - XCODEBUILD_SCHEME: Staging
    before_run:
      - cache-pull
      - bundle-install
      - run-highway
    after_run:
      - cache-push
      - deploy-bitriseio

  # Pull previously cached directories.

  cache-pull:
    steps:
      - cache-pull: {}

  # Push cached directories.
  #
  # By default, this pushes both `./Carthage` and `./Pods` directories. If you
  # don't use those package managers in your app, you can remove a corresponding
  # line.

  cache-push:
    steps:
      - cache-push:
          inputs:
            - cache_paths: |-
                ./Carthage
                ./Pods

  bundle-install:
    steps:
      - certificate-and-profile-installer: {}
      - script:
          title: 'bundle-install'
          inputs:
            - content: bundle install

  run-highway:
    steps:
      - script:
          title: 'bundle exec fastlane highway'
          inputs:
            - content: bundle exec fastlane highway preset:$HIGHWAY_PRESET

  # Deploy build artifacts to bitrise.io.

  deploy-bitriseio:
    steps:
      - deploy-to-bitrise-io:
          inputs:
            - notify_user_groups: none
            - is_enable_public_page: false
